package com.michielswaanen.model;

import com.michielswaanen.util.ConsoleColor;

import java.util.*;

/**
 * @author Michiel Swaanen
 */
public class ConsumerModel extends Observable implements Runnable {

    private Queue<Integer> queue;

    /**
     * Constructor automatically starts the thread
     *
     * @param queue Specify the queue where the {@link ProducerModel} will add numbers to
     */
    public ConsumerModel(Queue<Integer> queue) {
        this.queue = queue;
        new Thread(this).start();
    }

    /**
     * Creates a runnable, this function will be called when {@link Thread#start()} is called
     */
    @Override
    public void run() {
        while (true) {
            if (this.queue.size() > 0) {

                // Get and remove first element in queue
                int number = this.queue.remove();

                // Calculate prime factors and format to string equation
                List<Integer> primes = primeFactors(number);
                String formattedPrimes = getPrimeEquation(primes, number);

                // Print to console
                System.out.println(ConsoleColor.ANSI_GREEN + "ConsumerModel >> " + formattedPrimes);

                // Update View
                notifyObservers(formattedPrimes);
                setChanged();
            } else {
                // Give the Producer thread time to run
                sleep(100);
            }
        }
    }

    /**
     * Creates an equation using the given parameters
     *
     * @pre primes     Must contain at least 1 integer
     * @param primes   List of the integer primes returned by {@link #primeFactors(int)}
     * @param solution Randomly generated by the {@link ConsumerModel}, also used as parameter to return the list of primes
     * @return A formatted equation using the specified parameters
     */
    private String getPrimeEquation(List<Integer> primes, int solution) {
        StringBuilder builder = new StringBuilder();

        for (int i = 0; i < primes.size(); i++) {
            builder.append(primes.get(i));

            if (i + 1 == primes.size())
                builder.append(" = ").append(solution);
            else
                builder.append(" * ");
        }

        return builder.toString();
    }

    /**
     * Generate a list of the primes, when you multiple these together you become @number
     *
     * @param number Specify the number where you want to calculate the primes for
     * @return List containing the primes, when you multiply them they result in the @number
     */
    private List<Integer> primeFactors(int number) {
        List<Integer> factors = new ArrayList<>();

        for (int i = 2; i <= number; i++) {
            while (number % i == 0) {
                factors.add(i);
                number /= i;
            }
        }

        return factors;
    }

    /**
     * Sleep the thread where it's currently running on
     *
     * @param time Specify the time in milliseconds
     */
    private void sleep(int time) {
        try {
            Thread.sleep(time);
        } catch (InterruptedException ignore) {
        }
    }
}
